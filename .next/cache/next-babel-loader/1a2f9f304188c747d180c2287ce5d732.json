{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marcel\\\\Documents\\\\kodprojekt\\\\arbetsprovMarcelWillAndSkill\\\\components\\\\Comments.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Comment from './Comment';\n\nclass Comments extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      comments: [],\n      loaded: false,\n      index: null,\n      userComment: \"\",\n      user: null\n    });\n\n    _defineProperty(this, \"fetchComments\", async () => {\n      const res = await fetch('https://flowers-mock-data.firebaseio.com/comments.json');\n      const data = await res.json();\n      this.setState({\n        comments: Object.entries(data),\n        loaded: true\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      this.setState({\n        userComment: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"post\", async message => {\n      if (message !== \"\") {\n        await fetch(`https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/${this.state.index}.json`, {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            comment: message\n          })\n        }).then(res => {\n          console.log(res);\n          this.fetchComments();\n          this.setState({\n            userComment: \"\"\n          });\n        }).catch(err => console.error(err));\n      }\n    });\n  }\n\n  async componentDidMount() {\n    this.fetchComments();\n    const {\n      user,\n      logout\n    } = useUser();\n    this.setState({\n      index: this.props.index,\n      user: user\n    });\n  } //Fetches comments, both on page load and when a comment is posted from client\n\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"jsx-1212496929\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, __jsx(\"h2\", {\n      className: \"jsx-1212496929\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, \"Comments\"), __jsx(\"div\", {\n      id: \"commentForm\",\n      className: \"jsx-1212496929\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, __jsx(\"textarea\", {\n      id: \"\",\n      cols: \"30\",\n      rows: \"2\",\n      value: this.state.userComment,\n      onChange: this.handleChange,\n      className: \"jsx-1212496929\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }), __jsx(\"button\", {\n      onClick: () => this.post(this.state.userComment),\n      className: \"jsx-1212496929\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, \"Comment\")), this.state.loaded ? this.state.comments.map(user => user[1][this.state.index] ? Object.entries(user[1][this.state.index]).map((myComment, index) => myComment[1].comment ? __jsx(\"div\", {\n      key: user[0] + index,\n      className: \"jsx-1212496929\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }, __jsx(Comment, {\n      user: user[0],\n      comment: myComment[1].comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 37\n      }\n    })) : null) : null) : null, __jsx(_JSXStyle, {\n      id: \"1212496929\",\n      __self: this\n    }, \"#commentForm.jsx-1212496929{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;}textarea.jsx-1212496929{resize:none;width:100%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTWFyY2VsXFxEb2N1bWVudHNcXGtvZHByb2pla3RcXGFyYmV0c3Byb3ZNYXJjZWxXaWxsQW5kU2tpbGxcXGNvbXBvbmVudHNcXENvbW1lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRFNEIsQUFHa0MsQUFJRCxZQUNELFdBQ2YsbURBTGUsV0FDZiIsImZpbGUiOiJDOlxcVXNlcnNcXE1hcmNlbFxcRG9jdW1lbnRzXFxrb2Rwcm9qZWt0XFxhcmJldHNwcm92TWFyY2VsV2lsbEFuZFNraWxsXFxjb21wb25lbnRzXFxDb21tZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21tZW50IGZyb20gJy4vQ29tbWVudCc7XHJcblxyXG5jbGFzcyBDb21tZW50cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBzdGF0ZSA9IHtcclxuICAgICAgICBjb21tZW50czogW10sXHJcbiAgICAgICAgbG9hZGVkOiBmYWxzZSxcclxuICAgICAgICBpbmRleDogbnVsbCxcclxuICAgICAgICB1c2VyQ29tbWVudDogXCJcIixcclxuICAgICAgICB1c2VyOiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5mZXRjaENvbW1lbnRzKCk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VyLCBsb2dvdXQgfSA9IHVzZVVzZXIoKVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBpbmRleDogdGhpcy5wcm9wcy5pbmRleCxcclxuICAgICAgICAgICAgdXNlcjogdXNlclxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvL0ZldGNoZXMgY29tbWVudHMsIGJvdGggb24gcGFnZSBsb2FkIGFuZCB3aGVuIGEgY29tbWVudCBpcyBwb3N0ZWQgZnJvbSBjbGllbnRcclxuICAgIGZldGNoQ29tbWVudHMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vZmxvd2Vycy1tb2NrLWRhdGEuZmlyZWJhc2Vpby5jb20vY29tbWVudHMuanNvbicpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBjb21tZW50czogT2JqZWN0LmVudHJpZXMoZGF0YSksXHJcbiAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDaGFuZ2UgPSAoZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB1c2VyQ29tbWVudDogZS50YXJnZXQudmFsdWVcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHBvc3QgPSBhc3luYyAobWVzc2FnZSkgPT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGZldGNoKGBodHRwczovL2Zsb3dlcnMtbW9jay1kYXRhLmZpcmViYXNlaW8uY29tL2NvbW1lbnRzL01hcmNlbFIxOTk4LyR7dGhpcy5zdGF0ZS5pbmRleH0uanNvbmAsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGNvbW1lbnQ6IG1lc3NhZ2UgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hDb21tZW50cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyQ29tbWVudDogXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgyPkNvbW1lbnRzPC9oMj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJjb21tZW50Rm9ybVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD1cIlwiIGNvbHM9XCIzMFwiIHJvd3M9XCIyXCIgdmFsdWU9e3RoaXMuc3RhdGUudXNlckNvbW1lbnR9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMucG9zdCh0aGlzLnN0YXRlLnVzZXJDb21tZW50KX0+Q29tbWVudDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5sb2FkZWQgPyB0aGlzLnN0YXRlLmNvbW1lbnRzLm1hcCh1c2VyID0+IChcclxuICAgICAgICAgICAgICAgICAgICB1c2VyWzFdW3RoaXMuc3RhdGUuaW5kZXhdID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyh1c2VyWzFdW3RoaXMuc3RhdGUuaW5kZXhdKS5tYXAoKG15Q29tbWVudCwgaW5kZXgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG15Q29tbWVudFsxXS5jb21tZW50ID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17dXNlclswXSArIGluZGV4fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbW1lbnQgdXNlcj17dXNlclswXX0gY29tbWVudD17bXlDb21tZW50WzFdLmNvbW1lbnR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXHJcbiAgICAgICAgICAgICAgICAgICAgKSA6IG51bGxcclxuICAgICAgICAgICAgICAgICkpIDogbnVsbH1cclxuICAgICAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgICAgICNjb21tZW50Rm9ybXtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGV4dGFyZWEge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogbm9uZTtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGB9PC9zdHlsZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29tbWVudHM7Il19 */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\Marcel\\\\\\\\Documents\\\\\\\\kodprojekt\\\\\\\\arbetsprovMarcelWillAndSkill\\\\\\\\components\\\\\\\\Comments.js */\"));\n  }\n\n}\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Marcel/Documents/kodprojekt/arbetsprovMarcelWillAndSkill/components/Comments.js"],"names":["Comment","Comments","React","Component","comments","loaded","index","userComment","user","res","fetch","data","json","setState","Object","entries","e","target","value","message","state","method","headers","body","JSON","stringify","comment","then","console","log","fetchComments","catch","err","error","componentDidMount","logout","useUser","props","render","handleChange","post","map","myComment"],"mappings":"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","sourcesContent":["import Comment from './Comment';\r\n\r\nclass Comments extends React.Component {\r\n    state = {\r\n        comments: [],\r\n        loaded: false,\r\n        index: null,\r\n        userComment: \"\",\r\n        user: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.fetchComments();\r\n        const { user, logout } = useUser()\r\n        this.setState({\r\n            index: this.props.index,\r\n            user: user\r\n        });\r\n\r\n    }\r\n\r\n    //Fetches comments, both on page load and when a comment is posted from client\r\n    fetchComments = async () => {\r\n        const res = await fetch('https://flowers-mock-data.firebaseio.com/comments.json');\r\n        const data = await res.json();\r\n        this.setState({\r\n            comments: Object.entries(data),\r\n            loaded: true,\r\n        });\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            userComment: e.target.value\r\n        })\r\n    }\r\n\r\n    post = async (message) => {\r\n        if (message !== \"\") {\r\n            await fetch(`https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/${this.state.index}.json`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ comment: message })\r\n            })\r\n                .then(res => {\r\n                    console.log(res)\r\n                    this.fetchComments();\r\n                    this.setState({\r\n                        userComment: \"\"\r\n                    })\r\n                })\r\n                .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Comments</h2>\r\n                <div id=\"commentForm\">\r\n                    <textarea id=\"\" cols=\"30\" rows=\"2\" value={this.state.userComment} onChange={this.handleChange} />\r\n                    <button onClick={() => this.post(this.state.userComment)}>Comment</button>\r\n                </div>\r\n                {this.state.loaded ? this.state.comments.map(user => (\r\n                    user[1][this.state.index] ? (\r\n                        Object.entries(user[1][this.state.index]).map((myComment, index) => (\r\n                            myComment[1].comment ?\r\n                                <div key={user[0] + index}>\r\n                                    <Comment user={user[0]} comment={myComment[1].comment} />\r\n                                </div>\r\n                                : null\r\n                        ))\r\n                    ) : null\r\n                )) : null}\r\n                <style jsx>{`\r\n                #commentForm{\r\n                    display: flex;\r\n                    width: 100%;\r\n                }\r\n                textarea {\r\n                    resize: none;\r\n                    width: 100%;\r\n                }\r\n                `}</style>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Comments;"]},"metadata":{},"sourceType":"module"}