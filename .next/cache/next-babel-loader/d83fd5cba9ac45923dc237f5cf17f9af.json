{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marcel\\\\Documents\\\\kodprojekt\\\\arbetsprovMarcelWillAndSkill\\\\components\\\\Comments.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Comment from './Comment';\nimport { useEffect, useState } from 'react';\nimport { useUser } from '../utils/auth/useUser';\n\nconst Comments = props => {\n  const {\n    0: comments,\n    1: setComments\n  } = useState([]);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: index,\n    1: setIndex\n  } = useState(null);\n  const {\n    0: userComment,\n    1: setUserComment\n  } = useState(\"\");\n  const {\n    user,\n    logout\n  } = useUser();\n  useEffect(() => {\n    fetchComments();\n    setIndex(props.index);\n  }, []); //Fetches comments, both on page load and when a comment is posted from client\n\n  const fetchComments = async () => {\n    const res = await fetch('https://flowers-mock-data.firebaseio.com/comments.json');\n    const data = await res.json();\n    setComments(Object.entries(data));\n    setLoaded(true);\n  };\n\n  const handleChange = e => {\n    setUserComment(e.target.value);\n  };\n\n  const post = async message => {\n    if (message !== \"\") {\n      await fetch(`https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/${index}.json`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          comment: message\n        })\n      }).then(res => {\n        console.log(res);\n        fetchComments();\n        setUserComment(\"\");\n      }).catch(err => console.error(err));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Comments\"), user ? __jsx(\"div\", {\n    id: \"commentForm\",\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, __jsx(\"textarea\", {\n    id: \"\",\n    cols: \"30\",\n    rows: \"2\",\n    value: userComment,\n    placeholder: `Comment publicly as ${user.email}`,\n    onChange: handleChange,\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    disabled: !userComment,\n    onClick: () => post(userComment),\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"Comment\")) : __jsx(\"div\", {\n    id: \"commentForm\",\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 22\n    }\n  }, __jsx(\"textarea\", {\n    id: \"\",\n    cols: \"30\",\n    rows: \"2\",\n    placeholder: \"Sign in in order to comment.\",\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }), __jsx(\"button\", {\n    disabled: true,\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Comment\")), loaded ? comments.map(user => user[1][index] ? Object.entries(user[1][index]).map((myComment, index) => myComment[1].comment ? __jsx(\"div\", {\n    key: user[0] + index,\n    className: \"jsx-1212496929\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, __jsx(Comment, {\n    user: user[0],\n    comment: myComment[1].comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  })) : null) : null) : null, __jsx(_JSXStyle, {\n    id: \"1212496929\",\n    __self: this\n  }, \"#commentForm.jsx-1212496929{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;}textarea.jsx-1212496929{resize:none;width:100%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTWFyY2VsXFxEb2N1bWVudHNcXGtvZHByb2pla3RcXGFyYmV0c3Byb3ZNYXJjZWxXaWxsQW5kU2tpbGxcXGNvbXBvbmVudHNcXENvbW1lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFd0IsQUFHa0MsQUFJRCxZQUNELFdBQ2YsbURBTGUsV0FDZiIsImZpbGUiOiJDOlxcVXNlcnNcXE1hcmNlbFxcRG9jdW1lbnRzXFxrb2Rwcm9qZWt0XFxhcmJldHNwcm92TWFyY2VsV2lsbEFuZFNraWxsXFxjb21wb25lbnRzXFxDb21tZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21tZW50IGZyb20gJy4vQ29tbWVudCc7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZVVzZXIgfSBmcm9tICcuLi91dGlscy9hdXRoL3VzZVVzZXInXHJcblxyXG5jb25zdCBDb21tZW50cyA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgW2NvbW1lbnRzLCBzZXRDb21tZW50c10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgW2luZGV4LCBzZXRJbmRleF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFt1c2VyQ29tbWVudCwgc2V0VXNlckNvbW1lbnRdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCB7IHVzZXIsIGxvZ291dCB9ID0gdXNlVXNlcigpXHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBmZXRjaENvbW1lbnRzKCk7XHJcbiAgICAgICAgc2V0SW5kZXgocHJvcHMuaW5kZXgpXHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgLy9GZXRjaGVzIGNvbW1lbnRzLCBib3RoIG9uIHBhZ2UgbG9hZCBhbmQgd2hlbiBhIGNvbW1lbnQgaXMgcG9zdGVkIGZyb20gY2xpZW50XHJcbiAgICBjb25zdCBmZXRjaENvbW1lbnRzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL2Zsb3dlcnMtbW9jay1kYXRhLmZpcmViYXNlaW8uY29tL2NvbW1lbnRzLmpzb24nKTtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgICAgICBzZXRDb21tZW50cyhPYmplY3QuZW50cmllcyhkYXRhKSk7XHJcbiAgICAgICAgc2V0TG9hZGVkKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0VXNlckNvbW1lbnQoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBvc3QgPSBhc3luYyAobWVzc2FnZSkgPT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGZldGNoKGBodHRwczovL2Zsb3dlcnMtbW9jay1kYXRhLmZpcmViYXNlaW8uY29tL2NvbW1lbnRzL01hcmNlbFIxOTk4LyR7aW5kZXh9Lmpzb25gLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBjb21tZW50OiBtZXNzYWdlIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcylcclxuICAgICAgICAgICAgICAgICAgICBmZXRjaENvbW1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VXNlckNvbW1lbnQoXCJcIik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxoMj5Db21tZW50czwvaDI+XHJcbiAgICAgICAgICAgIHt1c2VyID8gPGRpdiBpZD1cImNvbW1lbnRGb3JtXCI+XHJcbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9XCJcIiBjb2xzPVwiMzBcIiByb3dzPVwiMlwiIHZhbHVlPXt1c2VyQ29tbWVudH0gcGxhY2Vob2xkZXI9e2BDb21tZW50IHB1YmxpY2x5IGFzICR7dXNlci5lbWFpbH1gfSBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBkaXNhYmxlZD17IXVzZXJDb21tZW50fSBvbkNsaWNrPXsoKSA9PiBwb3N0KHVzZXJDb21tZW50KX0+Q29tbWVudDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj4gOiA8ZGl2IGlkPVwiY29tbWVudEZvcm1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9XCJcIiBjb2xzPVwiMzBcIiByb3dzPVwiMlwiIHBsYWNlaG9sZGVyPVwiU2lnbiBpbiBpbiBvcmRlciB0byBjb21tZW50LlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkaXNhYmxlZD5Db21tZW50PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAge2xvYWRlZCA/IGNvbW1lbnRzLm1hcCh1c2VyID0+IChcclxuICAgICAgICAgICAgICAgIHVzZXJbMV1baW5kZXhdID8gKFxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHVzZXJbMV1baW5kZXhdKS5tYXAoKG15Q29tbWVudCwgaW5kZXgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXlDb21tZW50WzFdLmNvbW1lbnQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3VzZXJbMF0gKyBpbmRleH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbW1lbnQgdXNlcj17dXNlclswXX0gY29tbWVudD17bXlDb21tZW50WzFdLmNvbW1lbnR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICkpXHJcbiAgICAgICAgICAgICAgICApIDogbnVsbFxyXG4gICAgICAgICAgICApKSA6IG51bGx9XHJcbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgICAgICNjb21tZW50Rm9ybXtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGV4dGFyZWEge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogbm9uZTtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGB9PC9zdHlsZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb21tZW50czsiXX0= */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\Marcel\\\\\\\\Documents\\\\\\\\kodprojekt\\\\\\\\arbetsprovMarcelWillAndSkill\\\\\\\\components\\\\\\\\Comments.js */\"));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Marcel/Documents/kodprojekt/arbetsprovMarcelWillAndSkill/components/Comments.js"],"names":["Comment","useEffect","useState","useUser","Comments","props","comments","setComments","loaded","setLoaded","index","setIndex","userComment","setUserComment","user","logout","fetchComments","res","fetch","data","json","Object","entries","handleChange","e","target","value","post","message","method","headers","body","JSON","stringify","comment","then","console","log","catch","err","error","email","map","myComment"],"mappings":"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","sourcesContent":["import Comment from './Comment';\r\nimport { useEffect, useState } from 'react';\r\nimport { useUser } from '../utils/auth/useUser'\r\n\r\nconst Comments = (props) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [index, setIndex] = useState(null);\r\n    const [userComment, setUserComment] = useState(\"\");\r\n    const { user, logout } = useUser()\r\n\r\n    useEffect(() => {\r\n        fetchComments();\r\n        setIndex(props.index)\r\n    }, []);\r\n\r\n    //Fetches comments, both on page load and when a comment is posted from client\r\n    const fetchComments = async () => {\r\n        const res = await fetch('https://flowers-mock-data.firebaseio.com/comments.json');\r\n        const data = await res.json();\r\n        setComments(Object.entries(data));\r\n        setLoaded(true);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setUserComment(e.target.value);\r\n    }\r\n\r\n    const post = async (message) => {\r\n        if (message !== \"\") {\r\n            await fetch(`https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/${index}.json`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ comment: message })\r\n            })\r\n                .then(res => {\r\n                    console.log(res)\r\n                    fetchComments();\r\n                    setUserComment(\"\");\r\n                })\r\n                .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Comments</h2>\r\n            {user ? <div id=\"commentForm\">\r\n                <textarea id=\"\" cols=\"30\" rows=\"2\" value={userComment} placeholder={`Comment publicly as ${user.email}`} onChange={handleChange} />\r\n                <button disabled={!userComment} onClick={() => post(userComment)}>Comment</button>\r\n            </div> : <div id=\"commentForm\">\r\n                    <textarea id=\"\" cols=\"30\" rows=\"2\" placeholder=\"Sign in in order to comment.\" />\r\n                    <button disabled>Comment</button>\r\n                </div>\r\n            }\r\n\r\n            {loaded ? comments.map(user => (\r\n                user[1][index] ? (\r\n                    Object.entries(user[1][index]).map((myComment, index) => (\r\n                        myComment[1].comment ?\r\n                            <div key={user[0] + index}>\r\n                                <Comment user={user[0]} comment={myComment[1].comment} />\r\n                            </div>\r\n                            : null\r\n                    ))\r\n                ) : null\r\n            )) : null}\r\n            <style jsx>{`\r\n                #commentForm{\r\n                    display: flex;\r\n                    width: 100%;\r\n                }\r\n                textarea {\r\n                    resize: none;\r\n                    width: 100%;\r\n                }\r\n                `}</style>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Comments;"]},"metadata":{},"sourceType":"module"}