{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marcel\\\\Documents\\\\kodprojekt\\\\arbetsprovMarcelWillAndSkill\\\\components\\\\Comments.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Comment from './Comment';\nimport { useEffect, useState } from 'react';\nimport { useUser } from '../utils/auth/useUser';\n\nconst Comments = props => {\n  const {\n    0: comments,\n    1: setComments\n  } = useState([]);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: index,\n    1: setIndex\n  } = useState(null);\n  const {\n    0: userComment,\n    1: setUserComment\n  } = useState(\"\");\n  const {\n    user,\n    logout\n  } = useUser();\n  useEffect(() => {\n    fetchComments();\n    setIndex(props.index);\n  }, []); //Fetches comments, both on page load and when a comment is posted from client\n\n  const fetchComments = async () => {\n    const res = await fetch('https://flowers-mock-data.firebaseio.com/comments.json');\n    const data = await res.json();\n    setComments(Object.entries(data));\n    setLoaded(true);\n  };\n\n  const handleChange = e => {\n    setUserComment(e.target.value);\n  };\n\n  const post = async message => {\n    if (message !== \"\") {\n      await fetch(`https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/${index}.json`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          comment: message\n        })\n      }).then(res => {\n        console.log(res);\n        fetchComments();\n        setUserComment(\"\");\n      }).catch(err => console.error(err));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-2025610538\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-2025610538\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Comments\"), user ? __jsx(\"div\", {\n    id: \"commentForm\",\n    className: \"jsx-2025610538\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, __jsx(\"textarea\", {\n    id: \"\",\n    cols: \"30\",\n    rows: \"2\",\n    value: userComment,\n    placeholder: `Comment publicly as MarcelR1998`,\n    onChange: handleChange,\n    className: \"jsx-2025610538\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    disabled: !userComment,\n    onClick: () => post(userComment),\n    className: \"jsx-2025610538\" + \" \" + \"commentButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"Comment\")) : __jsx(\"div\", {\n    id: \"commentForm\",\n    className: \"jsx-2025610538\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 22\n    }\n  }, __jsx(\"textarea\", {\n    id: \"\",\n    cols: \"30\",\n    rows: \"2\",\n    placeholder: \"Sign in in order to comment.\",\n    className: \"jsx-2025610538\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }), __jsx(\"button\", {\n    disabled: true,\n    className: \"jsx-2025610538\" + \" \" + \"commentButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Comment\")), loaded ? comments.map(user => user[1][index] ? Object.entries(user[1][index]).map((myComment, index) => myComment[1].comment ? __jsx(\"div\", {\n    key: user[0] + index,\n    className: \"jsx-2025610538\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, __jsx(Comment, {\n    user: user[0],\n    comment: myComment[1].comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  })) : null) : null) : null, __jsx(_JSXStyle, {\n    id: \"2025610538\",\n    __self: this\n  }, \"#commentForm.jsx-2025610538{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;margin-bottom:1em;}textarea.jsx-2025610538{resize:none;width:100%;}.commentButton.jsx-2025610538{background-color:deepskyblue;color:white;border:2px solid deepskyblue;border-radius:8px;margin-left:4px;padding:8px;cursor:pointer;}.commentButton.jsx-2025610538:disabled{-webkit-filter:opacity(0.4);filter:opacity(0.4);}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTWFyY2VsXFxEb2N1bWVudHNcXGtvZHByb2pla3RcXGFyYmV0c3Byb3ZNYXJjZWxXaWxsQW5kU2tpbGxcXGNvbXBvbmVudHNcXENvbW1lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFd0IsQUFHa0MsQUFLRCxBQUlpQixBQVVsQyxZQWJnQixXQUNmLE1BR2dCLFlBQ2lCLE9BUWpDLHNCQVBzQixJQVhQLFdBQ08sR0FXRixlQVZwQixDQVdnQixZQUNHLGVBQ25CIiwiZmlsZSI6IkM6XFxVc2Vyc1xcTWFyY2VsXFxEb2N1bWVudHNcXGtvZHByb2pla3RcXGFyYmV0c3Byb3ZNYXJjZWxXaWxsQW5kU2tpbGxcXGNvbXBvbmVudHNcXENvbW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbW1lbnQgZnJvbSAnLi9Db21tZW50JztcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlVXNlciB9IGZyb20gJy4uL3V0aWxzL2F1dGgvdXNlVXNlcidcclxuXHJcbmNvbnN0IENvbW1lbnRzID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCBbY29tbWVudHMsIHNldENvbW1lbnRzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtsb2FkZWQsIHNldExvYWRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbaW5kZXgsIHNldEluZGV4XSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3VzZXJDb21tZW50LCBzZXRVc2VyQ29tbWVudF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IHsgdXNlciwgbG9nb3V0IH0gPSB1c2VVc2VyKClcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGZldGNoQ29tbWVudHMoKTtcclxuICAgICAgICBzZXRJbmRleChwcm9wcy5pbmRleClcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICAvL0ZldGNoZXMgY29tbWVudHMsIGJvdGggb24gcGFnZSBsb2FkIGFuZCB3aGVuIGEgY29tbWVudCBpcyBwb3N0ZWQgZnJvbSBjbGllbnRcclxuICAgIGNvbnN0IGZldGNoQ29tbWVudHMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vZmxvd2Vycy1tb2NrLWRhdGEuZmlyZWJhc2Vpby5jb20vY29tbWVudHMuanNvbicpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgICAgIHNldENvbW1lbnRzKE9iamVjdC5lbnRyaWVzKGRhdGEpKTtcclxuICAgICAgICBzZXRMb2FkZWQodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGUpID0+IHtcclxuICAgICAgICBzZXRVc2VyQ29tbWVudChlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcG9zdCA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgYXdhaXQgZmV0Y2goYGh0dHBzOi8vZmxvd2Vycy1tb2NrLWRhdGEuZmlyZWJhc2Vpby5jb20vY29tbWVudHMvTWFyY2VsUjE5OTgvJHtpbmRleH0uanNvbmAsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGNvbW1lbnQ6IG1lc3NhZ2UgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoQ29tbWVudHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRVc2VyQ29tbWVudChcIlwiKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGgyPkNvbW1lbnRzPC9oMj5cclxuICAgICAgICAgICAge3VzZXIgPyA8ZGl2IGlkPVwiY29tbWVudEZvcm1cIj5cclxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD1cIlwiIGNvbHM9XCIzMFwiIHJvd3M9XCIyXCIgdmFsdWU9e3VzZXJDb21tZW50fSBwbGFjZWhvbGRlcj17YENvbW1lbnQgcHVibGljbHkgYXMgTWFyY2VsUjE5OThgfSBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJjb21tZW50QnV0dG9uXCIgZGlzYWJsZWQ9eyF1c2VyQ29tbWVudH0gb25DbGljaz17KCkgPT4gcG9zdCh1c2VyQ29tbWVudCl9PkNvbW1lbnQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+IDogPGRpdiBpZD1cImNvbW1lbnRGb3JtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPVwiXCIgY29scz1cIjMwXCIgcm93cz1cIjJcIiBwbGFjZWhvbGRlcj1cIlNpZ24gaW4gaW4gb3JkZXIgdG8gY29tbWVudC5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiY29tbWVudEJ1dHRvblwiIGRpc2FibGVkPkNvbW1lbnQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB7bG9hZGVkID8gY29tbWVudHMubWFwKHVzZXIgPT4gKFxyXG4gICAgICAgICAgICAgICAgdXNlclsxXVtpbmRleF0gPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModXNlclsxXVtpbmRleF0pLm1hcCgobXlDb21tZW50LCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBteUNvbW1lbnRbMV0uY29tbWVudCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17dXNlclswXSArIGluZGV4fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29tbWVudCB1c2VyPXt1c2VyWzBdfSBjb21tZW50PXtteUNvbW1lbnRbMV0uY29tbWVudH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgKSlcclxuICAgICAgICAgICAgICAgICkgOiBudWxsXHJcbiAgICAgICAgICAgICkpIDogbnVsbH1cclxuICAgICAgICAgICAgPHN0eWxlIGpzeD57YFxyXG4gICAgICAgICAgICAgICAgI2NvbW1lbnRGb3Jte1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGV4dGFyZWEge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogbm9uZTtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC5jb21tZW50QnV0dG9ue1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRlZXBza3libHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCBkZWVwc2t5Ymx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDRweDtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLmNvbW1lbnRCdXR0b246ZGlzYWJsZWR7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBvcGFjaXR5KDAuNClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGB9PC9zdHlsZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb21tZW50czsiXX0= */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\Marcel\\\\\\\\Documents\\\\\\\\kodprojekt\\\\\\\\arbetsprovMarcelWillAndSkill\\\\\\\\components\\\\\\\\Comments.js */\"));\n};\n\nexport default Comments;","map":{"version":3,"sources":["C:/Users/Marcel/Documents/kodprojekt/arbetsprovMarcelWillAndSkill/components/Comments.js"],"names":["Comment","useEffect","useState","useUser","Comments","props","comments","setComments","loaded","setLoaded","index","setIndex","userComment","setUserComment","user","logout","fetchComments","res","fetch","data","json","Object","entries","handleChange","e","target","value","post","message","method","headers","body","JSON","stringify","comment","then","console","log","catch","err","error","map","myComment"],"mappings":"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","sourcesContent":["import Comment from './Comment';\r\nimport { useEffect, useState } from 'react';\r\nimport { useUser } from '../utils/auth/useUser'\r\n\r\nconst Comments = (props) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [index, setIndex] = useState(null);\r\n    const [userComment, setUserComment] = useState(\"\");\r\n    const { user, logout } = useUser()\r\n\r\n    useEffect(() => {\r\n        fetchComments();\r\n        setIndex(props.index)\r\n    }, []);\r\n\r\n    //Fetches comments, both on page load and when a comment is posted from client\r\n    const fetchComments = async () => {\r\n        const res = await fetch('https://flowers-mock-data.firebaseio.com/comments.json');\r\n        const data = await res.json();\r\n        setComments(Object.entries(data));\r\n        setLoaded(true);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setUserComment(e.target.value);\r\n    }\r\n\r\n    const post = async (message) => {\r\n        if (message !== \"\") {\r\n            await fetch(`https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/${index}.json`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ comment: message })\r\n            })\r\n                .then(res => {\r\n                    console.log(res)\r\n                    fetchComments();\r\n                    setUserComment(\"\");\r\n                })\r\n                .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Comments</h2>\r\n            {user ? <div id=\"commentForm\">\r\n                <textarea id=\"\" cols=\"30\" rows=\"2\" value={userComment} placeholder={`Comment publicly as MarcelR1998`} onChange={handleChange} />\r\n                <button className=\"commentButton\" disabled={!userComment} onClick={() => post(userComment)}>Comment</button>\r\n            </div> : <div id=\"commentForm\">\r\n                    <textarea id=\"\" cols=\"30\" rows=\"2\" placeholder=\"Sign in in order to comment.\" />\r\n                    <button className=\"commentButton\" disabled>Comment</button>\r\n                </div>\r\n            }\r\n\r\n            {loaded ? comments.map(user => (\r\n                user[1][index] ? (\r\n                    Object.entries(user[1][index]).map((myComment, index) => (\r\n                        myComment[1].comment ?\r\n                            <div key={user[0] + index}>\r\n                                <Comment user={user[0]} comment={myComment[1].comment} />\r\n                            </div>\r\n                            : null\r\n                    ))\r\n                ) : null\r\n            )) : null}\r\n            <style jsx>{`\r\n                #commentForm{\r\n                    display: flex;\r\n                    width: 100%;\r\n                    margin-bottom: 1em;\r\n                }\r\n                textarea {\r\n                    resize: none;\r\n                    width: 100%;\r\n                }\r\n                .commentButton{\r\n                    background-color: deepskyblue;\r\n                    color: white;\r\n                    border: 2px solid deepskyblue;\r\n                    border-radius: 8px;\r\n                    margin-left: 4px;\r\n                    padding: 8px;\r\n                    cursor: pointer;\r\n                }\r\n                .commentButton:disabled{\r\n                    filter: opacity(0.4)\r\n                }\r\n                `}</style>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Comments;"]},"metadata":{},"sourceType":"module"}