{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Marcel\\\\Documents\\\\kodprojekt\\\\arbetsprovMarcelWillAndSkill\\\\components\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Comment from './Comment';\nimport { useEffect, useState } from 'react';\nimport { useUser } from '../utils/auth/useUser';\n\nvar Comments = function Comments(props) {\n  _s();\n\n  var _useState = useState([]),\n      comments = _useState[0],\n      setComments = _useState[1];\n\n  var _useState2 = useState(false),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(null),\n      index = _useState3[0],\n      setIndex = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      userComment = _useState4[0],\n      setUserComment = _useState4[1];\n\n  var _useUser = useUser(),\n      user = _useUser.user,\n      logout = _useUser.logout;\n\n  useEffect(function () {\n    fetchComments();\n    setIndex(props.index);\n  }, []); //Fetches comments, both on page load and when a comment is posted from client\n\n  var fetchComments = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('https://flowers-mock-data.firebaseio.com/comments.json');\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              setComments(Object.entries(data));\n              setLoaded(true);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchComments() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(e) {\n    setUserComment(e.target.value);\n  };\n\n  var post = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(message !== \"\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              _context2.next = 3;\n              return fetch(\"https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/\".concat(index, \".json\"), {\n                method: 'post',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  comment: message\n                })\n              }).then(function (res) {\n                console.log(res);\n                fetchComments();\n                setUserComment(\"\");\n              })[\"catch\"](function (err) {\n                return console.error(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function post(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: \"jsx-2025610538\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-2025610538\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Comments\"), user ? __jsx(\"div\", {\n    id: \"commentForm\",\n    className: \"jsx-2025610538\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, __jsx(\"textarea\", {\n    id: \"\",\n    cols: \"30\",\n    rows: \"2\",\n    value: userComment,\n    placeholder: \"Comment publicly as MarcelR1998\",\n    onChange: handleChange,\n    className: \"jsx-2025610538\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), __jsx(\"button\", {\n    disabled: !userComment,\n    onClick: function onClick() {\n      return post(userComment);\n    },\n    className: \"jsx-2025610538\" + \" \" + \"commentButton\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"Comment\")) : __jsx(\"div\", {\n    id: \"commentForm\",\n    className: \"jsx-2025610538\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 22\n    }\n  }, __jsx(\"textarea\", {\n    id: \"\",\n    cols: \"30\",\n    rows: \"2\",\n    placeholder: \"Sign in in order to comment.\",\n    value: \"\",\n    className: \"jsx-2025610538\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }), __jsx(\"button\", {\n    disabled: true,\n    className: \"jsx-2025610538\" + \" \" + \"commentButton\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Comment\")), loaded ? comments.map(function (user) {\n    return user[1][index] ? Object.entries(user[1][index]).map(function (myComment, index) {\n      return myComment[1].comment ? __jsx(\"div\", {\n        key: user[0] + index,\n        className: \"jsx-2025610538\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      }, __jsx(Comment, {\n        user: user[0],\n        comment: myComment[1].comment,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }\n      })) : null;\n    }) : null;\n  }) : null, __jsx(_JSXStyle, {\n    id: \"2025610538\",\n    __self: _this\n  }, \"#commentForm.jsx-2025610538{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;margin-bottom:1em;}textarea.jsx-2025610538{resize:none;width:100%;}.commentButton.jsx-2025610538{background-color:deepskyblue;color:white;border:2px solid deepskyblue;border-radius:8px;margin-left:4px;padding:8px;cursor:pointer;}.commentButton.jsx-2025610538:disabled{-webkit-filter:opacity(0.4);filter:opacity(0.4);}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTWFyY2VsXFxEb2N1bWVudHNcXGtvZHByb2pla3RcXGFyYmV0c3Byb3ZNYXJjZWxXaWxsQW5kU2tpbGxcXGNvbXBvbmVudHNcXENvbW1lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFd0IsQUFHa0MsQUFLRCxBQUlpQixBQVVsQyxZQWJnQixXQUNmLE1BR2dCLFlBQ2lCLE9BUWpDLHNCQVBzQixJQVhQLFdBQ08sR0FXRixlQVZwQixDQVdnQixZQUNHLGVBQ25CIiwiZmlsZSI6IkM6XFxVc2Vyc1xcTWFyY2VsXFxEb2N1bWVudHNcXGtvZHByb2pla3RcXGFyYmV0c3Byb3ZNYXJjZWxXaWxsQW5kU2tpbGxcXGNvbXBvbmVudHNcXENvbW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbW1lbnQgZnJvbSAnLi9Db21tZW50JztcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlVXNlciB9IGZyb20gJy4uL3V0aWxzL2F1dGgvdXNlVXNlcidcclxuXHJcbmNvbnN0IENvbW1lbnRzID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCBbY29tbWVudHMsIHNldENvbW1lbnRzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtsb2FkZWQsIHNldExvYWRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbaW5kZXgsIHNldEluZGV4XSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3VzZXJDb21tZW50LCBzZXRVc2VyQ29tbWVudF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IHsgdXNlciwgbG9nb3V0IH0gPSB1c2VVc2VyKClcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGZldGNoQ29tbWVudHMoKTtcclxuICAgICAgICBzZXRJbmRleChwcm9wcy5pbmRleClcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICAvL0ZldGNoZXMgY29tbWVudHMsIGJvdGggb24gcGFnZSBsb2FkIGFuZCB3aGVuIGEgY29tbWVudCBpcyBwb3N0ZWQgZnJvbSBjbGllbnRcclxuICAgIGNvbnN0IGZldGNoQ29tbWVudHMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vZmxvd2Vycy1tb2NrLWRhdGEuZmlyZWJhc2Vpby5jb20vY29tbWVudHMuanNvbicpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgICAgIHNldENvbW1lbnRzKE9iamVjdC5lbnRyaWVzKGRhdGEpKTtcclxuICAgICAgICBzZXRMb2FkZWQodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGUpID0+IHtcclxuICAgICAgICBzZXRVc2VyQ29tbWVudChlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcG9zdCA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgYXdhaXQgZmV0Y2goYGh0dHBzOi8vZmxvd2Vycy1tb2NrLWRhdGEuZmlyZWJhc2Vpby5jb20vY29tbWVudHMvTWFyY2VsUjE5OTgvJHtpbmRleH0uanNvbmAsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGNvbW1lbnQ6IG1lc3NhZ2UgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoQ29tbWVudHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRVc2VyQ29tbWVudChcIlwiKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGgyPkNvbW1lbnRzPC9oMj5cclxuICAgICAgICAgICAge3VzZXIgPyA8ZGl2IGlkPVwiY29tbWVudEZvcm1cIj5cclxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD1cIlwiIGNvbHM9XCIzMFwiIHJvd3M9XCIyXCIgdmFsdWU9e3VzZXJDb21tZW50fSBwbGFjZWhvbGRlcj17YENvbW1lbnQgcHVibGljbHkgYXMgTWFyY2VsUjE5OThgfSBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJjb21tZW50QnV0dG9uXCIgZGlzYWJsZWQ9eyF1c2VyQ29tbWVudH0gb25DbGljaz17KCkgPT4gcG9zdCh1c2VyQ29tbWVudCl9PkNvbW1lbnQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+IDogPGRpdiBpZD1cImNvbW1lbnRGb3JtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPVwiXCIgY29scz1cIjMwXCIgcm93cz1cIjJcIiBwbGFjZWhvbGRlcj1cIlNpZ24gaW4gaW4gb3JkZXIgdG8gY29tbWVudC5cIiB2YWx1ZT1cIlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJjb21tZW50QnV0dG9uXCIgZGlzYWJsZWQ+Q29tbWVudDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHtsb2FkZWQgPyBjb21tZW50cy5tYXAodXNlciA9PiAoXHJcbiAgICAgICAgICAgICAgICB1c2VyWzFdW2luZGV4XSA/IChcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyh1c2VyWzFdW2luZGV4XSkubWFwKChteUNvbW1lbnQsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG15Q29tbWVudFsxXS5jb21tZW50ID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXt1c2VyWzBdICsgaW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb21tZW50IHVzZXI9e3VzZXJbMF19IGNvbW1lbnQ9e215Q29tbWVudFsxXS5jb21tZW50fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICApKVxyXG4gICAgICAgICAgICAgICAgKSA6IG51bGxcclxuICAgICAgICAgICAgKSkgOiBudWxsfVxyXG4gICAgICAgICAgICA8c3R5bGUganN4PntgXHJcbiAgICAgICAgICAgICAgICAjY29tbWVudEZvcm17XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0ZXh0YXJlYSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBub25lO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLmNvbW1lbnRCdXR0b257XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGVlcHNreWJsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkIGRlZXBza3libHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAuY29tbWVudEJ1dHRvbjpkaXNhYmxlZHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IG9wYWNpdHkoMC40KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYH08L3N0eWxlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbW1lbnRzOyJdfQ== */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\Marcel\\\\\\\\Documents\\\\\\\\kodprojekt\\\\\\\\arbetsprovMarcelWillAndSkill\\\\\\\\components\\\\\\\\Comments.js */\"));\n};\n\n_s(Comments, \"ToFae+AXG/KNlOqCKics7xVx750=\", false, function () {\n  return [useUser];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/Marcel/Documents/kodprojekt/arbetsprovMarcelWillAndSkill/components/Comments.js"],"names":["Comment","useEffect","useState","useUser","Comments","props","comments","setComments","loaded","setLoaded","index","setIndex","userComment","setUserComment","user","logout","fetchComments","fetch","res","json","data","Object","entries","handleChange","e","target","value","post","message","method","headers","body","JSON","stringify","comment","then","console","log","err","error","map","myComment"],"mappings":"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","sourcesContent":["import Comment from './Comment';\r\nimport { useEffect, useState } from 'react';\r\nimport { useUser } from '../utils/auth/useUser'\r\n\r\nconst Comments = (props) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [index, setIndex] = useState(null);\r\n    const [userComment, setUserComment] = useState(\"\");\r\n    const { user, logout } = useUser()\r\n\r\n    useEffect(() => {\r\n        fetchComments();\r\n        setIndex(props.index)\r\n    }, []);\r\n\r\n    //Fetches comments, both on page load and when a comment is posted from client\r\n    const fetchComments = async () => {\r\n        const res = await fetch('https://flowers-mock-data.firebaseio.com/comments.json');\r\n        const data = await res.json();\r\n        setComments(Object.entries(data));\r\n        setLoaded(true);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setUserComment(e.target.value);\r\n    }\r\n\r\n    const post = async (message) => {\r\n        if (message !== \"\") {\r\n            await fetch(`https://flowers-mock-data.firebaseio.com/comments/MarcelR1998/${index}.json`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ comment: message })\r\n            })\r\n                .then(res => {\r\n                    console.log(res)\r\n                    fetchComments();\r\n                    setUserComment(\"\");\r\n                })\r\n                .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Comments</h2>\r\n            {user ? <div id=\"commentForm\">\r\n                <textarea id=\"\" cols=\"30\" rows=\"2\" value={userComment} placeholder={`Comment publicly as MarcelR1998`} onChange={handleChange} />\r\n                <button className=\"commentButton\" disabled={!userComment} onClick={() => post(userComment)}>Comment</button>\r\n            </div> : <div id=\"commentForm\">\r\n                    <textarea id=\"\" cols=\"30\" rows=\"2\" placeholder=\"Sign in in order to comment.\" value=\"\" />\r\n                    <button className=\"commentButton\" disabled>Comment</button>\r\n                </div>\r\n            }\r\n\r\n            {loaded ? comments.map(user => (\r\n                user[1][index] ? (\r\n                    Object.entries(user[1][index]).map((myComment, index) => (\r\n                        myComment[1].comment ?\r\n                            <div key={user[0] + index}>\r\n                                <Comment user={user[0]} comment={myComment[1].comment} />\r\n                            </div>\r\n                            : null\r\n                    ))\r\n                ) : null\r\n            )) : null}\r\n            <style jsx>{`\r\n                #commentForm{\r\n                    display: flex;\r\n                    width: 100%;\r\n                    margin-bottom: 1em;\r\n                }\r\n                textarea {\r\n                    resize: none;\r\n                    width: 100%;\r\n                }\r\n                .commentButton{\r\n                    background-color: deepskyblue;\r\n                    color: white;\r\n                    border: 2px solid deepskyblue;\r\n                    border-radius: 8px;\r\n                    margin-left: 4px;\r\n                    padding: 8px;\r\n                    cursor: pointer;\r\n                }\r\n                .commentButton:disabled{\r\n                    filter: opacity(0.4)\r\n                }\r\n                `}</style>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Comments;"]},"metadata":{},"sourceType":"module"}